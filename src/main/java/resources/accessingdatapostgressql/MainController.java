package resources.accessingdatapostgressql;

import com.uber.h3core.H3Core;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import resources.accessingdatapostgressql.database.LocationRepository;
import resources.accessingdatapostgressql.database.driverlocation;
import resources.accessingdatapostgressql.help.H3help;
import resources.accessingdatapostgressql.openstreetmaphelp.osmController;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LocationRepository locationRepository;
    private final H3Core h3 = H3Core.newInstance();
    private int res;

    public MainController() throws IOException {
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam Integer Driverid
            , @RequestParam double longtitude, @RequestParam double latitude) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        driverlocation n = new driverlocation();
        n.setDriverid(Driverid);
        n.setLongitude(longtitude);
        n.setLatitude(latitude);

        this.res = 9;
        long h = h3.geoToH3(longtitude, latitude, res);
        n.setH3index(h);
        locationRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<driverlocation> getAllUsers() {
        // This returns a JSON or XML with the users
        return locationRepository.findAll();
    }
    @GetMapping(path="/driver/{id}")
    public @ResponseBody ArrayList<driverlocation> one(@PathVariable int id) {

        return locationRepository.findUserUsingId(id);
    }

    @GetMapping(path="/driverId/{lat}/{lotitude}/{typeCar}")
    public @ResponseBody String ListId(@PathVariable float lat, @PathVariable float lotitude, @PathVariable int typeCar) throws IOException, JSONException {
        long start = System.currentTimeMillis();
        H3help temp = new H3help();
        ArrayList<driverlocation> resultDB = new ArrayList<driverlocation>();
        Long  h = temp.h3.geoToH3(lat,lotitude, 9);
        switch (typeCar) {
            case 1:
                for (int i = 0; i < 2 && resultDB.size() < 5; i++) {
                    resultDB = locationRepository.findUserUsingLongLat1(temp.queryVal(h));
                }
                break;
            case 2:
                for (int i = 0; i < 2 && resultDB.size() < 5; i++) {
                    resultDB = locationRepository.findUserUsingLongLat2(temp.queryVal(h));
                }
                break;
            case 3:
                for (int i = 0; i < 2 && resultDB.size() < 5; i++) {
                    resultDB = locationRepository.findUserUsingLongLat3(temp.queryVal(h));
                }
                break;
        }
        if (resultDB.size() == 0){
            return String.valueOf(System.currentTimeMillis() - start) + " Don't have Driver near you in around 5km";
        }
        osmController a = new osmController();
        ArrayList<Integer> distance = a.getDistance(lat,lotitude,resultDB);
        ArrayList<Integer> listID = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            listID.add(resultDB.get(distance.get(i)).getDriverid());
        }
        long finish = System.currentTimeMillis();
        long timeElapsed = finish - start;
        return timeElapsed + "\n" + listID;
    }
    @PostMapping(path="/update/{lat}/{lotitude}/{typeCar}/{id}")
    public @ResponseBody String UpdateDriver(@PathVariable float lat, @PathVariable float lotitude,@PathVariable int typeCar, @PathVariable int id)
            throws IOException, JSONException {
        H3help temp = new H3help();
        Long  h = temp.h3.geoToH3(lat,lotitude, 9);
        switch (typeCar) {
            case 1:
                locationRepository.UpdateLongLat1(h,id);
                break;
            case 2:
                locationRepository.UpdateLongLat2(h,id);
                break;
            case 3:
                locationRepository.UpdateLongLat3(h,id);
                break;
        }
        return "oke";
    }
//    @GetMapping(path="/testOSM/")
//    public @ResponseBody float testosm() throws IOException, JSONException {
//        osmController a = new osmController();
//        return a.getDistance(102.375942f,19.496121f,102.640132f,19.477157f);
//    }
}